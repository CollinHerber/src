package scripts.arceuusTabber.tasks;

import org.tribot.api2007.Inventory;

import java.util.ArrayList;
import java.util.List;

import org.tribot.api.Clicking;
import org.tribot.api.General;
import org.tribot.api2007.Objects;
import org.tribot.api2007.Player;
import org.tribot.api2007.ext.Filters;
import org.tribot.api2007.types.RSArea;
import org.tribot.api2007.types.RSObject;
import org.tribot.api2007.types.RSTile;

import scripts.dax_api.api_lib.DaxWalker;
import scripts.arceuusTabber.antiban.Antiban;
import scripts.arceuusTabber.antiban.PersistantABCUtil;
import scripts.arceuusTabber.framework.Task;

public class HandleEssenceMining extends Task {
	
	 private long averageMiningWaitTime;
	 private long lastMiningWaitTime;
	 private long totalMiningWaitTime;
	 private long totalMiningInstances;
	 public long waitingTime = PersistantABCUtil.get().getEstimatedWait();

	public RSArea DENSE_ESSENCE_AREA = new RSArea(new RSTile [] { new RSTile(1767, 3863, 0),new RSTile(1758, 3862, 0),new RSTile(1757, 3844, 0),new RSTile(1766, 3842, 0) });
 	
	public RSObject ore;
	public RSObject[] ores;
	
	public String[] PICKAXE = { " pickaxe" };
	public String[] DENSE_ESSENCE = { "Dense essence block" };
	
	List<Integer> abc2WaitTimes = new ArrayList<>();

	
	@Override
	public String status() {
		return "Mining Esscence" + " Status: " + getTaskState().name();
	}

	@Override
	public boolean canProcess() {
		return Inventory.find(Filters.Items.nameContains(PICKAXE)).length > 0  && (Inventory.find(Filters.Items.nameEquals("Chisel")).length > 0); //|| Equipment.getItem(SLOTS.WEAPON).equals(PICKAXE))
																				// try to add this at a later date
	}

	@Override
	public void process() {

		switch (getTaskState()) {
			
		case WALK_TO_ESSENCE:
			
			PersistantABCUtil.activateRun();
			DaxWalker.walkTo(DENSE_ESSENCE_AREA.getRandomTile());
			
			while (Player.isMoving()) {
				PersistantABCUtil.handleIdleActions();
		}
			
		break;
			
			
		case MINE_ESSENCE:
			
			ores = Objects.findNearest(30, "Dense runestone");

			if (ores != null) {
				
				if (Clicking.click("Chip", ores)) {
					PersistantABCUtil.get().generateSupportingTrackerInfo((int) averageMiningWaitTime);
					PersistantABCUtil.get().setHoverAndMenuOpenBooleans();
					PersistantABCUtil.get().generateAndSleep(waitingTime);
					
					while (Player.isMoving()) {
						General.sleep(2000, 3000);
					}
				}
				
			}
			
			break;
		
		case IDLE_WHILE_MINING:
			
			long timeStarted = System.currentTimeMillis();
            while (Player.getAnimation() != -1) {
            	PersistantABCUtil.handleIdleActions();
            }
            PersistantABCUtil.get().generateAndSleep((int) lastMiningWaitTime);
            updateStatistics(timeStarted);
            
            Antiban.moveCamera();                
            Antiban.randomMovement();
            Antiban.leaveGame();
            
            
            break;
		}
	}

	private enum TaskState {
		
		WALK_TO_ESSENCE,
		MINE_ESSENCE,
		IDLE_WHILE_MINING
	}
	
    private TaskState getTaskState() {


        if (Inventory.find(DENSE_ESSENCE).length == 0 && !DENSE_ESSENCE_AREA.contains(Player.getPosition())) {
            return TaskState.WALK_TO_ESSENCE;
        }
        
        if (DENSE_ESSENCE_AREA.contains(Player.getPosition()) && Player.getAnimation() == -1 && !Inventory.isFull()) {
        	return TaskState.MINE_ESSENCE;
        	
        }	

        return TaskState.IDLE_WHILE_MINING;
    }	

    private void updateStatistics(long timeStarted) {
        lastMiningWaitTime = System.currentTimeMillis() - timeStarted;
        totalMiningInstances++;
        totalMiningWaitTime += lastMiningWaitTime;
        averageMiningWaitTime = totalMiningWaitTime / totalMiningInstances;
    }
    
	
}
